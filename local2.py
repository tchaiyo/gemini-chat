import streamlit as st
import os
from google import genai
from google.genai import types

# --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---
DEFAULT_PARENT_FOLDER = "data"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
PARENT_FOLDER = DEFAULT_PARENT_FOLDER

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ---
def create_folder(folder_name, parent_folder):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
    full_path = os.path.join(parent_folder, folder_name)
    try:
        os.makedirs(full_path, exist_ok=True)
        st.success(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{folder_name}' ‡πÉ‡∏ô '{parent_folder}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {e}")

def list_folders(parent_folder):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    try:
        folders = [f for f in os.listdir(parent_folder) if os.path.isdir(os.path.join(parent_folder, f))]
        return folders
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {e}")
        return []

def upload_files(folder_name, uploaded_files, parent_folder):
    """‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    full_path = os.path.join(parent_folder, folder_name)
    success_count = 0
    for uploaded_file in uploaded_files:
        try:
            file_path = os.path.join(full_path, uploaded_file.name)
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            success_count += 1
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}': {e}")

    if success_count > 0:
        st.success(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î {success_count} ‡πÑ‡∏ü‡∏•‡πå ‡πÑ‡∏õ‡∏¢‡∏±‡∏á '{folder_name}' ‡πÉ‡∏ô '{parent_folder}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏î‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

def list_files_in_folder(folder_name, parent_folder):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    full_path = os.path.join(parent_folder, folder_name)
    try:
        files = [f for f in os.listdir(full_path) if os.path.isfile(os.path.join(full_path, f))]
        return files
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {e}")
        return []
    
def file_path_in_folder(folder_name, parent_folder):
    """‡πÅ‡∏™‡∏î‡∏á File Path ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    full_path = os.path.join(parent_folder, folder_name)
    try:
        files = [os.path.join(full_path, f) for f in os.listdir(full_path) if os.path.isfile(os.path.join(full_path, f))]
        return files
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {e}")
        return []

def delete_file(folder_name, file_name, parent_folder):
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå"""
    full_path = os.path.join(parent_folder, folder_name)
    try:
        file_path = os.path.join(full_path, file_name)
        os.remove(file_path)
        st.success(f"‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå '{file_name}' ‡∏à‡∏≤‡∏Å '{folder_name}' ‡πÉ‡∏ô '{parent_folder}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: {e}")

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á parent folder ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ---
os.makedirs(PARENT_FOLDER, exist_ok=True)

def main():
    # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Streamlit app ---
    st.title("GEMINI-2.0-Flash RAG Chatbot")

    # Initialize session state
    if 'finished' not in st.session_state:
        st.session_state.finished = False
    if 'parts' not in st.session_state:
        st.session_state.parts = []
    if 'uploaded_files' not in st.session_state:
        st.session_state.uploaded_files = []

    with st.sidebar:
        st.title('1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå')
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        st.subheader("1.1 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")
        new_folder_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà:")
        if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á"):
            if new_folder_name:
                create_folder(new_folder_name, PARENT_FOLDER)
            else:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")

        # 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        st.subheader("1.2 ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå")

        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        folder_options = list_folders(PARENT_FOLDER)

        if folder_options:
            selected_folder = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:", folder_options)
            uploaded_files_for_upload = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå:", accept_multiple_files=True)  # Allow multiple file uploads

            if uploaded_files_for_upload:
                upload_files(selected_folder, uploaded_files_for_upload, PARENT_FOLDER) # Call the multiple file upload function
        else:
            st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô")

        # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
        st.subheader("1.3 ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå")

        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó)
        folder_options = list_folders(PARENT_FOLDER)

        if folder_options:
            selected_folder_for_list = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå:", folder_options, key="folder_list")  # ‡πÄ‡∏û‡∏¥‡πà‡∏° key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Streamlit ‡πÑ‡∏°‡πà‡∏™‡∏±‡∏ö‡∏™‡∏ô‡∏Å‡∏±‡∏ö dropdown ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            files = list_files_in_folder(selected_folder_for_list, PARENT_FOLDER)

            if files:
                st.write("‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:")
                for file_path in files:
                    col1, col2 = st.columns([0.7, 0.3])
                    with col1:
                        st.write(f"- {file_path}")
                    with col2:
                        if st.button(f"x", key=f"delete_{file_path}"):  # Unique key for each button
                            delete_file(selected_folder_for_list, file_path, PARENT_FOLDER)
                            # Refresh file list after deletion
                            file_list = list_files_in_folder(selected_folder_for_list, PARENT_FOLDER)
            else:
                st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")

        # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Google API Key
        st.title('2. Google AI Config')
        google_api_key = st.text_input('Enter your Google API key:', type='password')
        selected_api_folder = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:", folder_options)
        client = genai.Client(api_key=google_api_key)

    if google_api_key:
        if selected_api_folder:

            km_files = file_path_in_folder(selected_api_folder, PARENT_FOLDER)

            # Create parts and uploaded_files if they don't exist in session_state
            if not st.session_state.parts:
                st.session_state.parts = []
            if not st.session_state.uploaded_files:
                st.session_state.uploaded_files = []


            if st.button('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'):
                # Clear existing data when starting a new analysis
                st.session_state.parts = []
                st.session_state.uploaded_files = []

                with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î..."):
                    for file_path in km_files:
                        st.write(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_path}")
                        uploaded_file = client.files.upload(file=file_path)
                        st.session_state.uploaded_files.append(uploaded_file)
                        st.session_state.parts.append(types.Part.from_uri(file_uri=uploaded_file.uri, mime_type=uploaded_file.mime_type))
                    st.session_state.finished = True
                    st.write(f"‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô {len(st.session_state.uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå")

            if st.session_state.finished: # ‡πÉ‡∏ä‡πâ session_state.finished
                q = st.text_input("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö:")
                if q:
                    st.write(f"‡∏Ñ‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {len(st.session_state.parts)} ‡πÑ‡∏ü‡∏•‡πå")
                    #st.write(f"‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠: {st.session_state.parts[0]}")
                    #st.write(f"‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠: {st.session_state.parts[1]}")
                    #st.session_state.parts.append(types.Part.from_text(text=f"""{q}""")) # ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                    combined_parts = st.session_state.parts + [types.Part.from_text(text=f"""{q}""")]

                    with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):

                        model = "gemini-2.0-flash"
                        contents = [
                            types.Content(
                                role="user",
                                parts=combined_parts
                            )
                        ]
                        generate_content_config = types.GenerateContentConfig(
                            temperature=1.0,
                            top_p=0.95,
                            top_k=40,
                            max_output_tokens=8192,
                            response_mime_type="text/plain",
                        )
                        for chunk in client.models.generate_content_stream(
                            model=model,
                            contents=contents,
                            config=generate_content_config,
                        ):
                            st.write(chunk.text)

                    # Clear the question after processing to avoid re-processing
                    # q = ""  # This doesn't work due to how Streamlit handles text_input
                    # A better solution might be to use a form and clear the input after submission.
            else:
                st.warning("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô")
        else:
            st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å Google API Key")


if __name__ == "__main__":
    main()